import{_ as e,K as r,L as a,a5 as c,M as t,N as l,W as o,F as h}from"./framework-edebdfe1.js";const s={},i=t("h1",{id:"函数分析",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#函数分析","aria-hidden":"true"},"#"),l(" 函数分析")],-1),n=o('<h2 id="函数调用" tabindex="-1"><a class="header-anchor" href="#函数调用" aria-hidden="true">#</a> 函数调用</h2><table><thead><tr><th>调用约定</th><th>参数传递顺序</th><th>谁清理栈</th><th>特点</th></tr></thead><tbody><tr><td><code>cdecl</code></td><td>从右到左</td><td>调用者</td><td>最常见，支持可变参数</td></tr><tr><td><code>stdcall</code></td><td>从右到左</td><td>被调用者</td><td>Windows API 默认</td></tr><tr><td><code>fastcall</code></td><td>前两个参数通过寄存器（ECX、EDX），剩余右到左入栈</td><td>被调用者</td><td>提高效率</td></tr><tr><td><code>thiscall</code></td><td>ECX 传递 this 指针，其余从右到左入栈</td><td>被调用者</td><td>C++ 成员函数默认</td></tr><tr><td><code>__vectorcall</code></td><td>参数优先使用寄存器传递，支持 SIMD</td><td>被调用者</td><td>新的高性能约定</td></tr><tr><td><code>syscall</code></td><td>系统调用</td><td>系统约定</td><td>内核调用</td></tr><tr><td>x64 通用</td><td>RCX, RDX, R8, R9（前四参数传寄存器）剩余入栈</td><td>被调用者</td><td>Windows x64 默认</td></tr></tbody></table><table><thead><tr><th>寄存器</th><th>用途</th></tr></thead><tbody><tr><td>EAX</td><td>函数返回值寄存器</td></tr><tr><td>ECX</td><td>fastcall 第一个参数、thiscall 的 this 指针</td></tr><tr><td>EDX</td><td>fastcall 第二个参数</td></tr><tr><td>ESP</td><td>栈顶指针</td></tr><tr><td>EBP</td><td>栈基址（常用于栈帧指针）</td></tr></tbody></table><table><thead><tr><th>参数位置</th><th>传递方式</th></tr></thead><tbody><tr><td>第 1 个</td><td>RCX</td></tr><tr><td>第 2 个</td><td>RDX</td></tr><tr><td>第 3 个</td><td>R8</td></tr><tr><td>第 4 个</td><td>R9</td></tr><tr><td>第 5 个及之后</td><td>入栈</td></tr></tbody></table><h2 id="缓冲区分配" tabindex="-1"><a class="header-anchor" href="#缓冲区分配" aria-hidden="true">#</a> 缓冲区分配</h2><ul><li>cdecl 调用者清，stdcall 被调清；</li><li>fastcall 用寄存，thiscall ECX；</li><li>参数右到左，返回靠 EAX；</li></ul>',6);function _(b,f){const d=h("DocsAD");return r(),a("div",null,[i,c(d),n])}const x=e(s,[["render",_],["__file","index.html.vue"]]);export{x as default};
