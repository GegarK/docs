import{_ as a,K as t,L as p,a5 as e,M as n,N as c,W as o,F as l}from"./framework-edebdfe1.js";const u={},i=n("h1",{id:"端口复用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#端口复用","aria-hidden":"true"},"#"),c(" 端口复用")],-1),k=n("p",null,"端口复用是指多个应用或服务共享一个网络端口的机制。常用于负载均衡、协议复用或安全研究（如旁路检测、防火墙绕过等）。",-1),d=o(`<table><thead><tr><th>风险类型</th><th>描述</th></tr></thead><tbody><tr><td>安全攻击</td><td>端口复用可能被用于 IDS/防火墙绕过、数据隐藏通道、端口欺骗等攻击场景。</td></tr><tr><td>调试困难</td><td>多个进程或线程绑定相同端口，可能导致日志和连接追踪复杂，排查问题困难。</td></tr><tr><td>配置易误</td><td>未正确设置 <code>SO_REUSEPORT</code> 或 <code>SO_REUSEADDR</code>，可能导致绑定失败或冲突行为。</td></tr><tr><td>跨平台差异</td><td>不同操作系统（如 Windows、Linux、macOS）对端口复用的支持和行为存在差异。</td></tr><tr><td>性能影响</td><td>大量复用监听 socket 时，系统需做额外的调度判断，可能引入开销。</td></tr></tbody></table><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket" aria-hidden="true">#</a> Socket</h2><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code><span class="token keyword">use</span> <span class="token namespace">socket2<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">Domain</span><span class="token punctuation">,</span> <span class="token class-name">Protocol</span><span class="token punctuation">,</span> <span class="token class-name">Socket</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span>net<span class="token punctuation">::</span></span><span class="token punctuation">{</span><span class="token class-name">SocketAddr</span><span class="token punctuation">,</span> <span class="token class-name">TcpListener</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token namespace">std<span class="token punctuation">::</span></span>thread<span class="token punctuation">;</span>

<span class="token keyword">fn</span> <span class="token function-definition function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">-&gt;</span> <span class="token namespace">std<span class="token punctuation">::</span>io<span class="token punctuation">::</span></span><span class="token class-name">Result</span><span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> addr<span class="token punctuation">:</span> <span class="token class-name">SocketAddr</span> <span class="token operator">=</span> <span class="token string">&quot;127.0.0.1:9000&quot;</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span><span class="token punctuation">..</span><span class="token number">2</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> addr <span class="token operator">=</span> addr<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token namespace">thread<span class="token punctuation">::</span></span><span class="token function">spawn</span><span class="token punctuation">(</span><span class="token keyword">move</span> <span class="token closure-params"><span class="token closure-punctuation punctuation">|</span><span class="token closure-punctuation punctuation">|</span></span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建 socket</span>
            <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token class-name">Socket</span><span class="token punctuation">::</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token class-name">Domain</span><span class="token punctuation">::</span><span class="token constant">IPV4</span><span class="token punctuation">,</span> <span class="token class-name">Type</span><span class="token punctuation">::</span><span class="token constant">STREAM</span><span class="token punctuation">,</span> <span class="token class-name">Some</span><span class="token punctuation">(</span><span class="token class-name">Protocol</span><span class="token punctuation">::</span><span class="token constant">TCP</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 设置 SO_REUSEADDR</span>
            socket<span class="token punctuation">.</span><span class="token function">set_reuse_address</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 绑定地址</span>
            socket<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>addr<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 开始监听</span>
            socket<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unwrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 转为 std::net::TcpListener</span>
            <span class="token keyword">let</span> listener<span class="token punctuation">:</span> <span class="token class-name">TcpListener</span> <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">into</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Listener {} started on {}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> stream <span class="token keyword">in</span> listener<span class="token punctuation">.</span><span class="token function">incoming</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">match</span> stream <span class="token punctuation">{</span>
                    <span class="token class-name">Ok</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">println!</span><span class="token punctuation">(</span><span class="token string">&quot;Connection on listener {}&quot;</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>
                    <span class="token class-name">Err</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token macro property">eprintln!</span><span class="token punctuation">(</span><span class="token string">&quot;Error: {}&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 保持主线程存活</span>
    <span class="token keyword">loop</span> <span class="token punctuation">{</span>
        <span class="token namespace">std<span class="token punctuation">::</span>thread<span class="token punctuation">::</span></span><span class="token function">park</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="ebpf" tabindex="-1"><a class="header-anchor" href="#ebpf" aria-hidden="true">#</a> EBPF</h2><ul><li>sudo apt install clang llvm bpftool</li><li>clang -O2 -g -target bpf -I/usr/include/$(uname -m)-linux-gnu -c ./ebpf.c -o reuse.o</li></ul><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-rust line-numbers-mode" data-ext="rs"><pre class="language-rust"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,8);function r(m,v){const s=l("DocsAD");return t(),p("div",null,[i,k,e(s),d])}const f=a(u,[["render",r],["__file","report.html.vue"]]);export{f as default};
