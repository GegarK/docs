import{_ as n,K as t,L as s,a5 as e,M as a,N as r,W as d,F as h}from"./framework-edebdfe1.js";const o="/imgs/hardware/hardware.png",c="/imgs/hardware/pwm.jpg",u={},p=a("h1",{id:"硬件基础",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#硬件基础","aria-hidden":"true"},"#"),r(" 硬件基础")],-1),b=a("div",{class:"hint-container warning"},[a("p",{class:"hint-container-title"},"DeeLMind 提示"),a("p",null,'"硬件"就类似一个人，由大脑指挥其它器官完成对应的工作。')],-1),f=d('<h2 id="什么是硬件" tabindex="-1"><a class="header-anchor" href="#什么是硬件" aria-hidden="true">#</a> 什么是硬件</h2><p>硬件（英文名Hardware）是由机械和光电元件等组成的各种物理装置的总称。</p><p><img src="'+o+'" alt="er" loading="lazy"></p><h2 id="大脑" tabindex="-1"><a class="header-anchor" href="#大脑" aria-hidden="true">#</a> 大脑</h2><ul><li>CPU</li></ul><p>中央处理器 （英语：Central Processing Unit)</p><ul><li>MPU</li></ul><p>微处理器（英语：Microprocessor）</p><ul><li>MCU</li></ul><p>微控制器（英语：Microcontroller）</p><h2 id="其它器官-传感器" tabindex="-1"><a class="header-anchor" href="#其它器官-传感器" aria-hidden="true">#</a> 其它器官（传感器）</h2><ul><li>眼睛</li><li>胳膊</li><li>视频</li><li>喇叭</li><li>电机马达</li><li>红外传感器</li><li>超声波传感器</li></ul><h2 id="骨骼" tabindex="-1"><a class="header-anchor" href="#骨骼" aria-hidden="true">#</a> 骨骼</h2><ul><li>骨架</li><li>PCB电路板</li></ul><h2 id="神经" tabindex="-1"><a class="header-anchor" href="#神经" aria-hidden="true">#</a> 神经</h2><ul><li>神经</li><li>血管</li><li>导线</li></ul><h2 id="硬件-类型" tabindex="-1"><a class="header-anchor" href="#硬件-类型" aria-hidden="true">#</a> &quot;硬件&quot;类型</h2><ul><li>FPGA</li><li>Arduino</li><li>51单片机</li><li>树莓派、香蕉派</li></ul><h2 id="硬件-区别" tabindex="-1"><a class="header-anchor" href="#硬件-区别" aria-hidden="true">#</a> &quot;硬件&quot;区别</h2><ul><li>编译器</li><li>编程IDE</li><li>硬件原理</li><li>调试过程</li></ul><h2 id="基础元器件" tabindex="-1"><a class="header-anchor" href="#基础元器件" aria-hidden="true">#</a> 基础元器件</h2><ul><li>电阻</li><li>电容</li><li>电感</li><li>二极管</li><li>三极管</li><li>场效应管</li></ul><h2 id="芯片架构" tabindex="-1"><a class="header-anchor" href="#芯片架构" aria-hidden="true">#</a> 芯片架构</h2><ul><li>X86</li><li>ARM <ul><li>Cortex-A</li><li>Cortex-R</li><li>Cortex-M</li></ul></li><li>MIPS</li><li>RISC-V</li><li>AVR</li></ul><h2 id="bootloader" tabindex="-1"><a class="header-anchor" href="#bootloader" aria-hidden="true">#</a> BootLoader</h2>',25),x={href:"https://github.com/arduino/ArduinoCore-avr/tree/master/bootloaders",target:"_blank",rel:"noopener noreferrer"},m=d('<h2 id="ram" tabindex="-1"><a class="header-anchor" href="#ram" aria-hidden="true">#</a> RAM</h2><p>RAM（随机存取存储器）用于临时存储程序和其他信息。当设备断电时，所有存储的数据都会消失。操作系统和当前正在运行的程序利用这种类型的存储，使这种极快且相对每千字节较贵的介质加速您的计算机使用。</p><h2 id="rom" tabindex="-1"><a class="header-anchor" href="#rom" aria-hidden="true">#</a> ROM</h2><p>ROM（只读存储器）是一种非易失性存储器，可以永久保存数据和程序，即使在断电情况下也能保留。</p><h2 id="eprom" tabindex="-1"><a class="header-anchor" href="#eprom" aria-hidden="true">#</a> EPROM</h2><p>EPROM（可擦除可编程只读存储器）是一种非易失性可重新编程的芯片，但需要紫外线来擦除芯片上的位。它们还需要比我们在编程数字电路时通常看到的更高电压。因此，EPROM不适合存储经常更改的信息。</p><h2 id="eeprom" tabindex="-1"><a class="header-anchor" href="#eeprom" aria-hidden="true">#</a> EEPROM</h2><p>EEPROM（电可擦除可编程只读存储器）与Flash内存之间的主要区别在于，当Flash内存被擦除时，整个设备都被擦除，而EEPROM则可以擦除所需字节。EPROM和EEPROM都是可擦除和可编程的只读存储器，但它们擦除数据的方式不同</p><h2 id="flash" tabindex="-1"><a class="header-anchor" href="#flash" aria-hidden="true">#</a> FLASH</h2><p>FLASH是一种非易失性内存，在微控制器中主要用作程序内存。</p><h2 id="spi" tabindex="-1"><a class="header-anchor" href="#spi" aria-hidden="true">#</a> SPI</h2><h2 id="icsp" tabindex="-1"><a class="header-anchor" href="#icsp" aria-hidden="true">#</a> ICSP</h2><ul><li>MISO</li><li>MOSI</li><li>VCC</li><li>SCK</li><li>Reset</li><li>GND</li></ul><h2 id="比特率" tabindex="-1"><a class="header-anchor" href="#比特率" aria-hidden="true">#</a> 比特率</h2><p>比特率在数字信道中，比特率是数字信号的传输速率，它用单位时间内传输的二进制代码的有效位(bit)数来表示，其单位为每秒比特数bit/s(bps)。</p><h2 id="波特率" tabindex="-1"><a class="header-anchor" href="#波特率" aria-hidden="true">#</a> 波特率</h2><p>波特率可以被理解为单位时间内传输符号的个数（传符号率），通过不同的调制方法可以在一个符号上负载多个比特信息。</p><h2 id="串行通信" tabindex="-1"><a class="header-anchor" href="#串行通信" aria-hidden="true">#</a> 串行通信</h2><p>串行通信技术(Serial Communication)，是指通信双方按位bit进行，遵守时序的一种通信方式。串行通信中，将数据按位依次传输， 每位数据占据固定的时间长度，仅用一根接收线和一根发送线就可以完成系统间交换信息。</p><h2 id="电阻色环" tabindex="-1"><a class="header-anchor" href="#电阻色环" aria-hidden="true">#</a> 电阻色环</h2><h2 id="高阻态" tabindex="-1"><a class="header-anchor" href="#高阻态" aria-hidden="true">#</a> 高阻态</h2><h2 id="悬空态" tabindex="-1"><a class="header-anchor" href="#悬空态" aria-hidden="true">#</a> 悬空态</h2><h2 id="上拉电阻" tabindex="-1"><a class="header-anchor" href="#上拉电阻" aria-hidden="true">#</a> 上拉电阻</h2><h2 id="下拉电阻" tabindex="-1"><a class="header-anchor" href="#下拉电阻" aria-hidden="true">#</a> 下拉电阻</h2><h2 id="调制解调" tabindex="-1"><a class="header-anchor" href="#调制解调" aria-hidden="true">#</a> 调制解调</h2><h2 id="pwm" tabindex="-1"><a class="header-anchor" href="#pwm" aria-hidden="true">#</a> PWM</h2><p>PWM(Pulse-width modulation),脉冲宽度调制</p><p><img src="'+c+'" alt="er" loading="lazy"></p><h2 id="串口、com口、uart口-ttl、rs-232、rs-485" tabindex="-1"><a class="header-anchor" href="#串口、com口、uart口-ttl、rs-232、rs-485" aria-hidden="true">#</a> 串口、COM口、UART口, TTL、RS-232、RS-485</h2><h2 id="什么是中断" tabindex="-1"><a class="header-anchor" href="#什么是中断" aria-hidden="true">#</a> 什么是中断</h2><h2 id="什么是模拟数字" tabindex="-1"><a class="header-anchor" href="#什么是模拟数字" aria-hidden="true">#</a> 什么是模拟数字</h2><h2 id="数模转换器-dac" tabindex="-1"><a class="header-anchor" href="#数模转换器-dac" aria-hidden="true">#</a> 数模转换器（DAC）</h2><h2 id="模数转换器-adc" tabindex="-1"><a class="header-anchor" href="#模数转换器-adc" aria-hidden="true">#</a> 模数转换器（ADC）</h2>',33);function _(M,R){const i=h("DocsAD"),l=h("ExternalLinkIcon");return t(),s("div",null,[p,b,e(i),e(i),e(i),f,a("p",null,[r("芯片首先加载的代码,"),a("a",x,[r("Github"),e(l)])]),m])}const C=n(u,[["render",_],["__file","basic.html.vue"]]);export{C as default};
