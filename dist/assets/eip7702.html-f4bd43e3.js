import{_ as o,K as c,L as i,M as n,N as s,a5 as a,W as l,F as t}from"./framework-edebdfe1.js";const u={},k=n("h1",{id:"eip-7702",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eip-7702","aria-hidden":"true"},"#"),s(" EIP-7702")],-1),r={href:"https://eips.ethereum.org/EIPS/eip-7702",target:"_blank",rel:"noopener noreferrer"},d=l(`<ul><li>多签名</li></ul><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.20</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">EIP7702Multisig</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> <span class="token keyword">public</span> threshold<span class="token punctuation">;</span>
    <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">address</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token keyword">public</span> isSigner<span class="token punctuation">;</span>

    <span class="token keyword">event</span> <span class="token function">Executed</span><span class="token punctuation">(</span><span class="token builtin">address</span> target<span class="token punctuation">,</span> <span class="token builtin">uint256</span> value<span class="token punctuation">,</span> <span class="token builtin">bytes</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> _signers<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _threshold<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>_signers<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> _threshold<span class="token punctuation">,</span> <span class="token string">&quot;Invalid threshold&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> _signers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            isSigner<span class="token punctuation">[</span>_signers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        threshold <span class="token operator">=</span> _threshold<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">execute</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> target<span class="token punctuation">,</span>
        <span class="token builtin">uint256</span> value<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> data<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> signatures
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes32</span> txHash <span class="token operator">=</span> <span class="token function">getTxHash</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">_validateSignatures</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> signatures<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> res<span class="token punctuation">)</span> <span class="token operator">=</span> target<span class="token punctuation">.</span>call<span class="token punctuation">{</span>value<span class="token punctuation">:</span> value<span class="token punctuation">}</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">&quot;Call failed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">emit</span> <span class="token function">Executed</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> value<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">getTxHash</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> target<span class="token punctuation">,</span>
        <span class="token builtin">uint256</span> value<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data
    <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> block<span class="token punctuation">.</span>chainid<span class="token punctuation">,</span> target<span class="token punctuation">,</span> value<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">_validateSignatures</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes32</span> txHash<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> signatures
    <span class="token punctuation">)</span> <span class="token keyword">internal</span> <span class="token keyword">view</span> <span class="token punctuation">{</span>
        <span class="token builtin">uint256</span> valid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token builtin">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">memory</span> seen <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">address</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>signatures<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> signatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token builtin">address</span> signer <span class="token operator">=</span> <span class="token function">recoverSigner</span><span class="token punctuation">(</span>txHash<span class="token punctuation">,</span> signatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">require</span><span class="token punctuation">(</span>isSigner<span class="token punctuation">[</span>signer<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;Invalid signer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Ensure no duplicates</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">require</span><span class="token punctuation">(</span>seen<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> signer<span class="token punctuation">,</span> <span class="token string">&quot;Duplicate signer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            seen<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> signer<span class="token punctuation">;</span>
            valid<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">require</span><span class="token punctuation">(</span>valid <span class="token operator">&gt;=</span> threshold<span class="token punctuation">,</span> <span class="token string">&quot;Not enough valid signatures&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">recoverSigner</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> hash<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> signature<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token builtin">bytes32</span> ethSignedHash <span class="token operator">=</span> <span class="token function">toEthSignedMessageHash</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">(</span><span class="token builtin">bytes32</span> r<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> s<span class="token punctuation">,</span> <span class="token builtin">uint8</span> v<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">splitSignature</span><span class="token punctuation">(</span>signature<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">ecrecover</span><span class="token punctuation">(</span>ethSignedHash<span class="token punctuation">,</span> v<span class="token punctuation">,</span> r<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">toEthSignedMessageHash</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> hash<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">keccak256</span><span class="token punctuation">(</span>abi<span class="token punctuation">.</span><span class="token function">encodePacked</span><span class="token punctuation">(</span><span class="token string">&quot;\\x19Ethereum Signed Message:\\n32&quot;</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">splitSignature</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> sig
    <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span> r<span class="token punctuation">,</span> <span class="token builtin">bytes32</span> s<span class="token punctuation">,</span> <span class="token builtin">uint8</span> v<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>sig<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token string">&quot;Bad sig length&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">assembly</span> <span class="token punctuation">{</span>
            r <span class="token operator">:=</span> <span class="token function">mload</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            s <span class="token operator">:=</span> <span class="token function">mload</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            v <span class="token operator">:=</span> <span class="token builtin">byte</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">mload</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function v(b,m){const p=t("ExternalLinkIcon"),e=t("DocsAD");return c(),i("div",null,[k,n("p",null,[n("a",r,[s("EIP-7702"),a(p)]),s(" 让 EOA（Externally Owned Account）在一笔交易期间，临时变成了 OA（合约账户，Contract Account），拥有合约账户的“超能力”。")]),a(e),d])}const g=o(u,[["render",v],["__file","eip7702.html.vue"]]);export{g as default};
