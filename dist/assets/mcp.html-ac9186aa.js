import{_ as n,K as i,L as r,M as e,N as t,a5 as l,W as o,F as c}from"./framework-edebdfe1.js";const h={},s=e("h1",{id:"mcp",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#mcp","aria-hidden":"true"},"#"),t(" MCP")],-1),d={href:"https://modelcontextprotocol.io/introduction",target:"_blank",rel:"noopener noreferrer"},_=e("strong",null,"MCP",-1),u=o('<hr><h2 id="核心目标" tabindex="-1"><a class="header-anchor" href="#核心目标" aria-hidden="true">#</a> 核心目标</h2><ul><li><strong>共享上下文</strong>：在不同模型间共享对用户和任务的理解。</li><li><strong>模块化扩展</strong>：允许不同工具根据需求提供或消费上下文。</li><li><strong>提高一致性</strong>：让多种模型和工具具备统一理解用户意图的能力。</li></ul><hr><h2 id="关键组件" tabindex="-1"><a class="header-anchor" href="#关键组件" aria-hidden="true">#</a> 关键组件</h2><h3 id="_1-context-agents" tabindex="-1"><a class="header-anchor" href="#_1-context-agents" aria-hidden="true">#</a> 1. Context Agents</h3><p>负责构建和维护上下文的模块，可能是：</p><ul><li>记忆系统（如：长期记忆、短期记忆）</li><li>日程管理器</li><li>知识库</li><li>实时数据抓取器等</li></ul><p>这些 Agent 会提供上下文内容给模型使用。</p><h3 id="_2-context-packs" tabindex="-1"><a class="header-anchor" href="#_2-context-packs" aria-hidden="true">#</a> 2. Context Packs</h3><ul><li>是一种<strong>结构化的上下文集合</strong>，可以被共享、存储和传输。</li><li>每个 Pack 包含若干上下文条目（如：记忆、文档、用户偏好等），具备明确的语义标签。</li></ul><h3 id="_3-context-api" tabindex="-1"><a class="header-anchor" href="#_3-context-api" aria-hidden="true">#</a> 3. Context API</h3><ul><li>定义了如何读取、写入、订阅上下文。</li><li>支持模型与 Agent 之间进行高效、标准化的上下文通信。</li></ul><hr><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h2><ul><li>多模型协作时共享用户状态（例如：聊天机器人 + 任务执行代理）</li><li>保持用户在不同设备或会话之间的一致体验</li><li>在企业或团队中部署统一的“组织记忆”系统</li></ul><hr><h2 id="举例" tabindex="-1"><a class="header-anchor" href="#举例" aria-hidden="true">#</a> 举例</h2><p>例如一个 AI 助手可能使用以下多个 Context Agents：</p><ul><li>日历 Agent 提供用户的会议信息</li><li>邮件 Agent 提供最新邮件摘要</li><li>项目管理 Agent 提供待办任务列表</li></ul><p>所有这些信息通过 MCP 形成一个完整的上下文 pack，供 AI 模型参考，从而给出更精准的回应。</p>',21);function p(x,g){const a=c("ExternalLinkIcon");return i(),r("div",null,[s,e("p",null,[e("a",d,[t("Model Context Protocol"),l(a)]),t("（简称 "),_,t("）是一个旨在提升大型语言模型（LLMs）上下文共享能力的协议。它通过在应用和模型之间建立一致、可共享的上下文表示方式，使得多个工具可以协同工作，共享对用户或任务的理解，从而带来更智能、更一致的体验。")]),u])}const m=n(h,[["render",p],["__file","mcp.html.vue"]]);export{m as default};
